{"version":3,"sources":["MovieGenre.js","MoviePoster.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","react_default","a","createElement","className","this","props","genre","Component","MoviePoster","poster","alt","src","title","Movie","_ref","genres","synopsis","src_MoviePoster","map","index","src_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","movies","_renderMovies","_this","movie","src_Movie","id","medium_cover_image","_getMovies","_callee","_ref2","regenerator_default","wrap","_context","prev","next","axios","get","sent","data","setState","isLoading","stop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUA0BeA,mLAbP,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBC,KAAKC,MAAMC,cAH9BC,aCiBVC,mLAdP,IAAMC,EAASL,KAAKC,MAAMI,OACpBC,EAAMN,KAAKC,MAAMK,IACvB,OACIV,EAAAC,EAAAC,cAAA,OAAKS,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKP,UAAU,yBAPpCI,mBC4CXM,MA9Cf,SAAAC,GAAiD,IAAjCF,EAAiCE,EAAjCF,MAAOH,EAA0BK,EAA1BL,OAAQM,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACe,EAAD,CAAaR,OAAQA,EAAQC,IAAKE,KAEtCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKU,GACLZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVY,EAAOG,IAAI,SAACZ,EAAOa,GAAR,OAAkBnB,EAAAC,EAAAC,cAACkB,EAAD,CAAYd,MAAOA,EAAOe,IAAKF,OAEjEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACIsB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,iCCqCbC,6MAlDbC,MAAO,CACLC,OAAQ,KAUVC,cAAgB,WAcd,OAbeC,EAAKH,MAAMC,OAAOZ,IAAK,SAACe,GACrC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,CAAOb,IAAKY,EAAME,GACxBvB,MAAOqB,EAAMrB,MACbH,OAAQwB,EAAMG,mBACd1B,IAAKuB,EAAMrB,MACXG,OAAQkB,EAAMlB,OACdC,SAAWiB,EAAMjB,gBAUrBqB,gCAAa,SAAAC,IAAA,IAAAC,EAAAT,EAAA,OAAAU,EAAAvC,EAAAwC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAKFC,IAAMC,IACd,4DANU,OAAAP,EAAAG,EAAAK,KAGAjB,EAHAS,EAEVS,KACEA,KAAQlB,OAKZE,EAAKiB,SAAS,CAAEnB,SAAQoB,WAAW,IARvB,wBAAAR,EAAAS,SAAAb,yFArBZlC,KAAKiC,8CAkCH,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,KAAKyB,MAAMC,OAAS,MAAO,gBACvC1B,KAAKyB,MAAMC,OAAS1B,KAAK2B,gBAAkB,kBAhDrCxB,aCKE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ1D,EAAAC,EAAAC,cAACyD,EAAD,MAAQC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bab6325f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\n// function MovieGenre({genre}){\n//     return (\n//         <span className=\"Movie__Genre\">{genre}</span>\n//     )\n// }\n\n\nclass MovieGenre extends Component{\n    render(){\n        return(\n            <span className=\"Movie__Genre\">{this.props.genre}</span>\n        )\n    }\n}\n\n\n\nMovieGenre.propTypes ={\n    genre: PropTypes.string.isRequired\n}\n\n\nexport default MovieGenre;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\n// function MoviePoster({poster, alt}){\n//     return (\n//         <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n//     )\n// }\n\nclass MoviePoster extends Component{\n    \n\n    render(){\n        const poster = this.props.poster;\n        const alt = this.props.alt;\n        return(\n            <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n        );\n    }\n}\n\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nexport default MoviePoster;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport MovieGenre from './MovieGenre';\nimport MoviePoster from './MoviePoster';\nimport './Movie.css';\n\n\nfunction Movie({title, poster, genres, synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title} />\n            </div>   \n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                    />   \n                </div>\n            </div>\n        </div>\n    )\n}\n\n// function MoviePoster({poster, alt}){\n//     return (\n//         <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n//     )\n// }\n\n// function MovieGenre({genre}){\n//     return (\n//         <span className=\"Movie__Genre\">{genre}</span>\n//     )\n// }\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\n\n\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\nimport axios from 'axios';\n\n\n\nclass App extends Component {\n  \n  // componentWillMount(){\n  //   console.log('will mount');\n  // }\n  state ={\n    movies: 0\n   \n  }\n \n  componentDidMount(){\n    //console.log('did mount'); \n    this._getMovies();\n\n   }\n\n  _renderMovies = () =>{\n    const movies = this.state.movies.map( (movie) => {\n      return <Movie key={movie.id} \n       title={movie.title}\n       poster={movie.medium_cover_image} \n       alt={movie.title}\n       genres={movie.genres} \n       synopsis ={movie.synopsis}\n\n\n      />\n    })\n  // react 자체 기능과 내가 만든 function을 구분짓기 위해 _ underbar 를 사용. \n\n    return movies;\n  }\n\n   _getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n  };\n\n\n  render(){\n      return (\n        <div className={this.state.movies ? \"App\" :\"App--loading\"}>\n          { this.state.movies ? this._renderMovies() : 'Loading'}\n         \n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}